name: Google Drive CSV Sync (on new file)

on:
  repository_dispatch:
    types: [ drive-csv-added ]   # send client_payload.file_id or client_payload.fileId
  workflow_dispatch:
    inputs:
      file_id:
        description: "Google Drive file ID (manual run)"
        required: false

# Minimal permissions (adjust if your job needs to push commits, etc.)
permissions:
  contents: write

concurrency:
  group: drive-csv-sync
  cancel-in-progress: false

jobs:
  drive-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-httplib2 pandas

      - name: (Debug) show dispatch payload
        run: echo 'payload=' ${{ toJson(github.event.client_payload) }}

      - name: Resolve FILE_ID (dispatch → manual input; supports file_id or fileId)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          FILE_ID="${{ github.event.client_payload.file_id  '' }}"
          if [ -z "${FILE_ID}" ]; then
            FILE_ID="${{ github.event.client_payload.fileId  '' }}"
          fi
          if [ -z "${FILE_ID}" ]; then
            FILE_ID="${{ inputs.file_id || '' }}"
          fi
          if [ -z "${FILE_ID}" ]; then
            echo "::error::Missing file_id. If running manually, enter it in the form. If calling via API/Apps Script, send client_payload.file_id or client_payload.fileId."
            exit 1
          fi
          echo "file_id=${FILE_ID}" >> "$GITHUB_OUTPUT"

      - name: Configure Google Service Account (writes JSON to file)
        id: gsa
        env:
          # Prefer GCP_SA_JSON; fallback to old name GDRIVE_CREDENTIALS if you used it before
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
          GDRIVE_CREDENTIALS: ${{ secrets.GDRIVE_CREDENTIALS }}
        shell: bash
        run: |
          set -euo pipefail
          JSON="${GCP_SA_JSON:-}"
          if [ -z "${JSON}" ] && [ -n "${GDRIVE_CREDENTIALS:-}" ]; then
            JSON="${GDRIVE_CREDENTIALS}"
          fi
          if [ -z "${JSON}" ]; then
            echo "::error::Missing service account JSON secret. Add repository secret GCP_SA_JSON (or GDRIVE_CREDENTIALS)."
            exit 1
          fi
          echo "${JSON}" > /tmp/gsa.json
          # Export for all subsequent steps so googleapiclient picks it up automatically
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gsa.json" >> "$GITHUB_ENV"

      - name: Validate file is CSV and fetch metadata
        id: meta
        env:
          FILE_ID: ${{ steps.resolve.outputs.file_id }}
        run: |
          python - <<'PY'
          import os, json, sys
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build

          name: Google Drive CSV Sync (on new file)

          on:
            repository_dispatch:
              types: [ drive-csv-added ]   # sent by Apps Script: payload must include client_payload.file_id
            workflow_dispatch:
              inputs:
                file_id:
                  description: "Google Drive file ID (manual run)"
                  required: false
          
          jobs:
            drive-sync:
              runs-on: ubuntu-latest
          
              steps:
                - name: Checkout code
                  uses: actions/checkout@v4
          
                - name: Set up Python
                  uses: actions/setup-python@v5
                  with:
                    python-version: "3.10"
          
                - name: Install dependencies
                  run: |
                    python -m pip install --upgrade pip
                    pip install pandas google-api-python-client google-auth-httplib2 google-auth-oauthlib
          
                - name: (Debug) show dispatch payload
                  run: echo 'payload=' ${{ toJson(github.event.client_payload) }}
          
                - name: Resolve FILE_ID (dispatch → manual input)
                  id: resolve
                  run: |
                    set -euo pipefail
                    FILE_ID="${{ github.event.client_payload.file_id }}"
                    if [ -z "${FILE_ID}" ]; then
                      FILE_ID="${{ inputs.file_id }}"
                    fi
                    if [ -z "${FILE_ID}" ]; then
                      echo "::error::Missing file_id. If running manually, enter it in the form. If using Apps Script, make sure it sends client_payload.file_id."
                      exit 1
                    fi
                    echo "file_id=${FILE_ID}" >> "$GITHUB_OUTPUT"
          
                - name: Run Drive flatten script
                  env:
                    GDRIVE_CREDENTIALS: ${{ secrets.GDRIVE_CREDENTIALS }}
                  run: |
                    set -euo pipefail
                    FILE_ID="${{ steps.resolve.outputs.file_id }}"
                    echo "Processing Drive file: ${FILE_ID}"
                    python pipeline/drive_script.py --file-id "${FILE_ID}" --overwrite
