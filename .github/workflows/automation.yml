name: Google Drive CSV Sync (on new file)

on:
  repository_dispatch:
    types: [drive-csv-added]   # send client_payload.file_id or client_payload.fileId
  workflow_dispatch:
    inputs:
      file_id:
        description: "Google Drive file ID (manual run)"
        required: false

permissions:
  contents: write

concurrency:
  group: drive-csv-sync
  cancel-in-progress: false

jobs:
  drive-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-httplib2 pandas

      - name: (Debug) show dispatch payload
        run: echo 'payload=' ${{ toJson(github.event.client_payload) }}

      - name: Resolve FILE_ID and FILE_NAME (dispatch → manual input)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          FILE_ID="${{ github.event.client_payload.file_id || '' }}"
          if [ -z "${FILE_ID}" ]; then
            FILE_ID="${{ github.event.client_payload.fileId || '' }}"
          fi
          if [ -z "${FILE_ID}" ]; then
            FILE_ID="${{ inputs.file_id || '' }}"
          fi
          if [ -z "${FILE_ID}" ]; then
            echo "::error::Missing file_id. If running manually, enter it in the form. If calling via API/Apps Script, send client_payload.file_id or client_payload.fileId."
            exit 1
          fi
          FILE_NAME="${{ github.event.client_payload.fileName || '' }}"
          echo "file_id=${FILE_ID}" >> "$GITHUB_OUTPUT"
          echo "file_name=${FILE_NAME}" >> "$GITHUB_OUTPUT"
          echo "Resolved FILE_ID=${FILE_ID}"
          echo "Resolved FILE_NAME=${FILE_NAME}"

      - name: Configure Google Service Account (export JSON for both clients)
        id: gsa
        env:
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
          GDRIVE_CREDENTIALS_OLD: ${{ secrets.GDRIVE_CREDENTIALS }} # optional fallback
        shell: bash
        run: |
          set -euo pipefail
          JSON="${GCP_SA_JSON:-}"
          if [ -z "${JSON}" ] && [ -n "${GDRIVE_CREDENTIALS_OLD:-}" ]; then
            JSON="${GDRIVE_CREDENTIALS_OLD}"
          fi
          if [ -z "${JSON}" ]; then
            echo "::error::Missing service account JSON secret. Add repository secret GCP_SA_JSON (or GDRIVE_CREDENTIALS)."
            exit 1
          fi

          # 1) For libraries that look for a file path:
          echo "${JSON}" > /tmp/gsa.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gsa.json" >> "$GITHUB_ENV"

          # 2) For pipeline/drive_script.py which expects JSON string in GDRIVE_CREDENTIALS:
          {
            echo 'GDRIVE_CREDENTIALS<<EOF'
            echo "${JSON}"
            echo 'EOF'
          } >> "$GITHUB_ENV"

      # (Optional) quick metadata sanity-check — remove if you don't need it
      - name: Quick sanity:resolved FILE_ID
        run: |
          echo "Using FILE_ID=${{ steps.resolve.outputs.file_id }}"
          echo "Using FILE_NAME=${{ steps.resolve.outputs.file_name }}"

      - name: Run Drive flatten script
        env:
          FILE_ID: ${{ steps.resolve.outputs.file_id }}
          FILE_NAME: ${{ steps.resolve.outputs.file_name }}
          # GDRIVE_CREDENTIALS comes from the earlier step via $GITHUB_ENV
        run: |
          set -euo pipefail
          echo "Processing Drive file: ${FILE_NAME:-} (${FILE_ID})"
          python pipeline/drive_script.py --file-id "${FILE_ID}" --overwrite
